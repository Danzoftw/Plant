{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\coolv\\\\OneDrive\\\\Desktop\\\\Plantisserie\\\\pages\\\\product.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport Link from 'next/link';\nimport Layout from \"../components/Layout\";\nimport { useRouter } from 'next/router';\nimport client from \"../components/ApolloClient\";\nimport gql from 'graphql-tag';\n\nvar Product = function Product() {\n  _s();\n\n  console.warn(props);\n  var router = useRouter();\n  var pid = router.query.pid;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Product\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, _this);\n}; // product.getInitialProps = async function( context ){\n//     let{ query: { slug } } = context;\n//     const id = slug ? parseInt( slug.split( '-' ).pop() ) : context.query.id;\n//     const PRODUCTS_QUERY = gql` query Product( $id: Int ! ){\n//         productBy( productId: $id){\n//             id\n//             databaseId\n//             averageRating\n//             slug\n//             description\n//             image {\n//                 uri\n//                 title\n//                 srcSet\n//                 sourceUrl\n//             }\n//             name\n//         }\n//     }`;\n//     const res = await client.query(({\n//         query: PRODUCTS_QUERY,\n//         variables: { id }\n//     }));\n//     return {\n//         product: res.data.productBy\n//     }\n// };\n\n\n_s(Product, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = Product;\nexport default Product;\n\nvar _c;\n\n$RefreshReg$(_c, \"Product\");","map":{"version":3,"sources":["C:/Users/coolv/OneDrive/Desktop/Plantisserie/pages/product.js"],"names":["Link","Layout","useRouter","client","gql","Product","console","warn","props","router","pid","query"],"mappings":";;;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,SAAT,QAA2B,aAA3B;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,IAAMC,OAAO,GAAI,SAAXA,OAAW,GAAM;AAAA;;AAClBC,EAAAA,OAAO,CAACC,IAAR,CAAcC,KAAd;AACA,MAAMC,MAAM,GAAGP,SAAS,EAAxB;AAFkB,MAGVQ,GAHU,GAGFD,MAAM,CAACE,KAHL,CAGVD,GAHU;AAInB,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ;AAGH,CAPD,C,CAWA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAxCML,O;UAEcH,S;;;KAFdG,O;AA2CN,eAAeA,OAAf","sourcesContent":["import Link from 'next/link';\r\nimport Layout from \"../components/Layout\";\r\nimport { useRouter  } from 'next/router';\r\nimport client from \"../components/ApolloClient\";\r\nimport gql from 'graphql-tag';\r\n\r\nconst Product =  () => {\r\n     console.warn( props );\r\n     const router = useRouter()\r\n     const { pid } = router.query\r\n    return(\r\n        <div>Product</div>\r\n    )\r\n}\r\n\r\n\r\n\r\n// product.getInitialProps = async function( context ){\r\n\r\n//     let{ query: { slug } } = context;\r\n//     const id = slug ? parseInt( slug.split( '-' ).pop() ) : context.query.id;\r\n\r\n//     const PRODUCTS_QUERY = gql` query Product( $id: Int ! ){\r\n//         productBy( productId: $id){\r\n//             id\r\n//             databaseId\r\n//             averageRating\r\n//             slug\r\n//             description\r\n//             image {\r\n//                 uri\r\n//                 title\r\n//                 srcSet\r\n//                 sourceUrl\r\n//             }\r\n//             name\r\n//         }\r\n//     }`;\r\n\r\n//     const res = await client.query(({\r\n//         query: PRODUCTS_QUERY,\r\n//         variables: { id }\r\n//     }));\r\n//     return {\r\n//         product: res.data.productBy\r\n//     }\r\n// };\r\n\r\n\r\nexport default Product;"]},"metadata":{},"sourceType":"module"}