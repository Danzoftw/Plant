{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/coolv/OneDrive/Desktop/Plantisserie/node_modules/@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"C:/Users/coolv/OneDrive/Desktop/Plantisserie/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"C:/Users/coolv/OneDrive/Desktop/Plantisserie/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\" query Product( $id: Int ! ){\\n        productBy( productId: $id){\\n            id\\n            databaseId\\n            averageRating\\n            slug\\n            description\\n            image {\\n                uri\\n                title\\n                srcSet\\n                sourceUrl\\n            }\\n            name\\n        }\\n    }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Link from 'next/link';\nimport Layout from \"../components/Layout\";\nimport { useRouter } from 'next/router';\nimport client from \"../components/ApolloClient\";\nimport gql from 'graphql-tag';\n\nvar Product = function Product() {};\n\n_c = Product;\n\nproduct.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var slug, id, PRODUCTS_QUERY, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            slug = context.query.slug;\n            id = slug ? parseInt(slug.split('-').pop()) : context.query.id;\n            PRODUCTS_QUERY = gql(_templateObject());\n            _context.next = 5;\n            return client.query({\n              query: PRODUCTS_QUERY,\n              variables: {\n                id: id\n              }\n            });\n\n          case 5:\n            res = _context.sent;\n            return _context.abrupt(\"return\", {\n              product: res.data.productBy\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default Product;\n\nvar _c;\n\n$RefreshReg$(_c, \"Product\");","map":{"version":3,"sources":["C:/Users/coolv/OneDrive/Desktop/Plantisserie/pages/product.js"],"names":["Link","Layout","useRouter","client","gql","Product","product","getInitialProps","context","slug","query","id","parseInt","split","pop","PRODUCTS_QUERY","variables","res","data","productBy"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,SAAT,QAA2B,aAA3B;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,IAAMC,OAAO,GAAI,SAAXA,OAAW,GAAM,CAEtB,CAFD;;KAAMA,O;;AAMNC,OAAO,CAACC,eAAR;AAAA,sEAA0B,iBAAgBC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAERC,YAAAA,IAFQ,GAEGD,OAFH,CAEjBE,KAFiB,CAERD,IAFQ;AAGhBE,YAAAA,EAHgB,GAGXF,IAAI,GAAGG,QAAQ,CAAEH,IAAI,CAACI,KAAL,CAAY,GAAZ,EAAkBC,GAAlB,EAAF,CAAX,GAAyCN,OAAO,CAACE,KAAR,CAAcC,EAHhD;AAKhBI,YAAAA,cALgB,GAKCX,GALD;AAAA;AAAA,mBAsBJD,MAAM,CAACO,KAAP,CAAc;AAC5BA,cAAAA,KAAK,EAAEK,cADqB;AAE5BC,cAAAA,SAAS,EAAE;AAAEL,gBAAAA,EAAE,EAAFA;AAAF;AAFiB,aAAd,CAtBI;;AAAA;AAsBhBM,YAAAA,GAtBgB;AAAA,6CA0Bf;AACHX,cAAAA,OAAO,EAAEW,GAAG,CAACC,IAAJ,CAASC;AADf,aA1Be;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA;;AAgCA,eAAed,OAAf","sourcesContent":["import Link from 'next/link';\r\nimport Layout from \"../components/Layout\";\r\nimport { useRouter  } from 'next/router';\r\nimport client from \"../components/ApolloClient\";\r\nimport gql from 'graphql-tag';\r\n\r\nconst Product =  () => {\r\n\r\n}\r\n\r\n\r\n\r\nproduct.getInitialProps = async function( context ){\r\n\r\n    let{ query: { slug } } = context;\r\n    const id = slug ? parseInt( slug.split( '-' ).pop() ) : context.query.id;\r\n\r\n    const PRODUCTS_QUERY = gql` query Product( $id: Int ! ){\r\n        productBy( productId: $id){\r\n            id\r\n            databaseId\r\n            averageRating\r\n            slug\r\n            description\r\n            image {\r\n                uri\r\n                title\r\n                srcSet\r\n                sourceUrl\r\n            }\r\n            name\r\n        }\r\n    }`;\r\n\r\n    const res = await client.query(({\r\n        query: PRODUCTS_QUERY,\r\n        variables: { id }\r\n    }));\r\n    return {\r\n        product: res.data.productBy\r\n    }\r\n};\r\n\r\n\r\nexport default Product;"]},"metadata":{},"sourceType":"module"}