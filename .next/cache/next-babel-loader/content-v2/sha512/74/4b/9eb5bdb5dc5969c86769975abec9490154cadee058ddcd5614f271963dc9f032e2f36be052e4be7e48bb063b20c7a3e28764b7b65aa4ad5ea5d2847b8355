{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\coolv\\\\OneDrive\\\\Desktop\\\\Plantisserie\\\\pages\\\\product.js\";\nimport Link from 'next/link';\nimport Layout from '../components/Layout';\nimport { withRouter } from 'next/router';\nimport client from \"../components/ApolloClient\";\nimport gql from 'graphql-tag';\nconst Product = withRouter(props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Product\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n});\n\nProduct.getInitialProps = async function (context) {\n  let {\n    query: {\n      slug\n    }\n  } = context;\n  const id = slug ? slug : context.query.id;\n  const PRODUCTS_QUERY = gql` query Product( $id: Int ! ){\n        productBy( productId: $id){\n            id\n            averageRating\n            slug\n            description\n            image {\n                uri\n                title\n                srcSet\n                sourceUrl\n                mediaItemId\n            }\n            name\n            productTags {\n                nodes {\n                  productTagId\n                }\n              }\n            }\n        }\n    }`;\n  const res = await client.query({\n    query: PRODUCTS_QUERY,\n    variables: {\n      id\n    }\n  });\n  return {\n    product: res.data.productBy\n  };\n};\n\nexport default Product;","map":{"version":3,"sources":["C:/Users/coolv/OneDrive/Desktop/Plantisserie/pages/product.js"],"names":["Link","Layout","withRouter","client","gql","Product","props","getInitialProps","context","query","slug","id","PRODUCTS_QUERY","res","variables","product","data","productBy"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,MAAMC,OAAO,GAAGH,UAAU,CAAGI,KAAK,IAAK;AACnC,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAJyB,CAA1B;;AAMAD,OAAO,CAACE,eAAR,GAA0B,gBAAgBC,OAAhB,EAAyB;AAE/C,MAAG;AAAEC,IAAAA,KAAK,EAAE;AAACC,MAAAA;AAAD;AAAT,MAAqBF,OAAxB;AACA,QAAMG,EAAE,GAAGD,IAAI,GAAGA,IAAH,GAAUF,OAAO,CAACC,KAAR,CAAcE,EAAvC;AAEA,QAAMC,cAAc,GAAGR,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MArBI;AAuBA,QAAMS,GAAG,GAAG,MAAMV,MAAM,CAACM,KAAP,CAAc;AAC5BA,IAAAA,KAAK,EAAEG,cADqB;AAE5BE,IAAAA,SAAS,EAAE;AAAEH,MAAAA;AAAF;AAFiB,GAAd,CAAlB;AAIA,SAAO;AACHI,IAAAA,OAAO,EAAEF,GAAG,CAACG,IAAJ,CAASC;AADf,GAAP;AAGH,CAnCD;;AAqCA,eAAeZ,OAAf","sourcesContent":["import Link from 'next/link';\r\nimport Layout from '../components/Layout';\r\nimport { withRouter } from 'next/router';\r\nimport client from \"../components/ApolloClient\";\r\nimport gql from 'graphql-tag';\r\n\r\nconst Product = withRouter ( props  => {\r\n    return(\r\n        <div>Product</div>\r\n    )\r\n});\r\n\r\nProduct.getInitialProps = async function( context ){\r\n\r\n    let{ query: {slug } } = context;\r\n    const id = slug ? slug : context.query.id;\r\n\r\n    const PRODUCTS_QUERY = gql` query Product( $id: Int ! ){\r\n        productBy( productId: $id){\r\n            id\r\n            averageRating\r\n            slug\r\n            description\r\n            image {\r\n                uri\r\n                title\r\n                srcSet\r\n                sourceUrl\r\n                mediaItemId\r\n            }\r\n            name\r\n            productTags {\r\n                nodes {\r\n                  productTagId\r\n                }\r\n              }\r\n            }\r\n        }\r\n    }`;\r\n\r\n    const res = await client.query(({\r\n        query: PRODUCTS_QUERY,\r\n        variables: { id }\r\n    }));\r\n    return {\r\n        product: res.data.productBy\r\n    }\r\n};\r\n\r\nexport default Product;"]},"metadata":{},"sourceType":"module"}