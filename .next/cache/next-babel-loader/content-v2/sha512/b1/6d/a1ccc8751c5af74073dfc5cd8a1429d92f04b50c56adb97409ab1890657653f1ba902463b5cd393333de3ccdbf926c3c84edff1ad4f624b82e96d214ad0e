{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/coolv/OneDrive/Desktop/Plantisserie/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/coolv/OneDrive/Desktop/Plantisserie/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _taggedTemplateLiteral from \"C:/Users/coolv/OneDrive/Desktop/Plantisserie/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"query{\\n        products(first: 20) {\\n            nodes {\\n                id\\n                databaseId\\n                averageRating\\n                slug\\n                description\\n                image {\\n                    uri\\n                    title\\n                    srcSet\\n                    sourceUrl\\n                }\\n            name\\n            }\\n        }\\n}\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Layout from '../components/Layout';\nimport client from '../components/ApolloClient';\nimport Product from '../components/Product';\nimport { Card, Container, Col, Row } from 'react-bootstrap';\nimport gql from 'graphql-tag';\nvar PRODUCTS_QUERY = gql(_templateObject());\n\nvar Index = function Index(props) {\n  var products = props.products;\n  return /*#__PURE__*/_jsx(Layout, {\n    children: /*#__PURE__*/_jsx(Container, {\n      children: /*#__PURE__*/_jsx(Row, {\n        className: \"product-container\",\n        children: products.length ? products.map(function (product) {\n          return /*#__PURE__*/_jsx(Product, {\n            product: product\n          }, product.id);\n        }) : ''\n      })\n    })\n  });\n};\n\nIndex.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var result;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return client.query({\n            query: PRODUCTS_QUERY\n          });\n\n        case 2:\n          result = _context.sent;\n          return _context.abrupt(\"return\", {\n            products: result.data.products.nodes\n          });\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default Index;","map":null,"metadata":{},"sourceType":"module"}