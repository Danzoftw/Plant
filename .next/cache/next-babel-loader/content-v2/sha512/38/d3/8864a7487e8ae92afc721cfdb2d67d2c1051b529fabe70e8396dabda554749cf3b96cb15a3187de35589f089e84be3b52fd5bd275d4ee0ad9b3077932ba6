{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/coolv/OneDrive/Desktop/Plantisserie/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/coolv/OneDrive/Desktop/Plantisserie/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _taggedTemplateLiteral from \"C:/Users/coolv/OneDrive/Desktop/Plantisserie/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\coolv\\\\OneDrive\\\\Desktop\\\\Plantisserie\\\\pages\\\\index.js\",\n    _this = this;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"query{\\n        products(first: 20) {\\n            nodes {\\n                id\\n                averageRating\\n                slug\\n                description\\n                image {\\n                    uri\\n                    title\\n                    srcSet\\n                    sourceUrl\\n                    mediaItemId\\n                }\\n            name\\n            productTags {\\n                nodes {\\n                  productTagId\\n                }\\n              }\\n            }\\n        }\\n}\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Layout from '../components/Layout';\nimport client from '../components/ApolloClient';\nimport Product from '../components/Product';\nimport { Card, Container, Col, Row } from 'react-bootstrap';\nimport gql from 'graphql-tag';\nvar PRODUCTS_QUERY = gql(_templateObject());\n\nvar Index = function Index(props) {\n  var products = props.products;\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"product-container\",\n      children: products.length ? products.map(function (product) {\n        return /*#__PURE__*/_jsxDEV(Product, {\n          product: product\n        }, product.image.mediaItemId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 46\n        }, _this);\n      }) : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, _this);\n};\n\n_c = Index;\nIndex.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var result;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return client.query({\n            query: PRODUCTS_QUERY\n          });\n\n        case 2:\n          result = _context.sent;\n          return _context.abrupt(\"return\", {\n            products: result.data.products.nodes\n          });\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["C:/Users/coolv/OneDrive/Desktop/Plantisserie/pages/index.js"],"names":["Layout","client","Product","Card","Container","Col","Row","gql","PRODUCTS_QUERY","Index","props","products","length","map","product","image","mediaItemId","getInitialProps","query","result","data","nodes"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AAEA,OAAOC,MAAP,MAAmB,4BAAnB;AAEA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,GAA1B,EAA+BC,GAA/B,QAA2C,iBAA3C;AAEA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,IAAMC,cAAc,GAAGD,GAAH,mBAApB;;AAwBA,IAAME,KAAK,GAAG,SAARA,KAAQ,CAAEC,KAAF,EAAa;AAAA,MAEfC,QAFe,GAEFD,KAFE,CAEfC,QAFe;AAIvB,sBACI,QAAC,MAAD;AAAA,2BACI,QAAC,GAAD;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,gBACMA,QAAQ,CAACC,MAAT,GACED,QAAQ,CAACE,GAAT,CAAc,UAAAC,OAAO;AAAA,4BAAI,QAAC,OAAD;AAA2C,UAAA,OAAO,EAAGA;AAArD,WAAeA,OAAO,CAACC,KAAR,CAAcC,WAA7B;AAAA;AAAA;AAAA;AAAA,iBAAJ;AAAA,OAArB,CADF,GAEE;AAHR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,WADJ;AASH,CAbD;;KAAMP,K;AAeNA,KAAK,CAACQ,eAAN,yEAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACChB,MAAM,CAACiB,KAAP,CAAc;AAAEA,YAAAA,KAAK,EAAEV;AAAT,WAAd,CADD;;AAAA;AACdW,UAAAA,MADc;AAAA,2CAEb;AACHR,YAAAA,QAAQ,EAAEQ,MAAM,CAACC,IAAP,CAAYT,QAAZ,CAAqBU;AAD5B,WAFa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;AAOA,eAAeZ,KAAf","sourcesContent":["import Layout from '../components/Layout';\r\n\r\nimport client from '../components/ApolloClient';\r\n\r\nimport Product from '../components/Product';\r\n\r\nimport { Card, Container, Col, Row  } from 'react-bootstrap';\r\n\r\nimport gql from 'graphql-tag';\r\n\r\nconst PRODUCTS_QUERY = gql`query{\r\n        products(first: 20) {\r\n            nodes {\r\n                id\r\n                averageRating\r\n                slug\r\n                description\r\n                image {\r\n                    uri\r\n                    title\r\n                    srcSet\r\n                    sourceUrl\r\n                    mediaItemId\r\n                }\r\n            name\r\n            productTags {\r\n                nodes {\r\n                  productTagId\r\n                }\r\n              }\r\n            }\r\n        }\r\n}`;\r\n\r\nconst Index = ( props ) => {\r\n\r\n    const { products } = props;\r\n\r\n    return (\r\n        <Layout>\r\n            <Row className=\"product-container\">\r\n                { products.length ? (\r\n                    products.map( product => <Product key={ product.image.mediaItemId } product={ product } /> )\r\n                ) : ''}\r\n            </Row>\r\n        </Layout>\r\n    )\r\n};\r\n\r\nIndex.getInitialProps = async () => {\r\n    const result = await client.query( { query: PRODUCTS_QUERY })\r\n    return {\r\n        products: result.data.products.nodes\r\n    }\r\n};\r\n\r\nexport default Index;"]},"metadata":{},"sourceType":"module"}